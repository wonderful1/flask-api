{
    "swagger": "2.0",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "401": {
                        "description": "email or password does not match"
                    },
                    "200": {
                        "description": "Login succeeded."
                    }
                },
                "summary": "Authenticate an existing user and return an access token",
                "operationId": "post_login_user",
                "parameters": [
                    {
                        "name": "email",
                        "in": "formData",
                        "type": "string",
                        "format": "email",
                        "required": true
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "type": "string",
                        "required": true
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/auth/logout": {
            "post": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "401": {
                        "description": "Token is invalid or expired."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "200": {
                        "description": "Log out succeeded, token is no longer valid."
                    }
                },
                "summary": "Add token to blacklist, deauthenticating the current user",
                "operationId": "post_logout_user",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/auth/register": {
            "post": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "409": {
                        "description": "Email address is already registered."
                    },
                    "201": {
                        "description": "New user was successfully created."
                    }
                },
                "summary": "Register a new user and return an access token",
                "operationId": "post_register_user",
                "parameters": [
                    {
                        "name": "email",
                        "in": "formData",
                        "type": "string",
                        "format": "email",
                        "required": true
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "type": "string",
                        "required": true
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/auth/user": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Token is currently valid.",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "401": {
                        "description": "Token is invalid or expired."
                    },
                    "400": {
                        "description": "Validation error."
                    }
                },
                "summary": "Validate access token and return user info",
                "operationId": "get_get_user",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "auth"
                ]
            }
        },
        "/widgets": {
            "get": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "HTTPStatus.OK": {
                        "description": "Retrieved widget list.",
                        "schema": {
                            "$ref": "#/definitions/Pagination"
                        }
                    }
                },
                "summary": "Retrieve a list of widgets",
                "operationId": "get_widget_list",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "default": 1
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "type": "integer",
                        "minimum": 0,
                        "exclusiveMinimum": true,
                        "default": 10,
                        "enum": [
                            5,
                            10,
                            25,
                            50,
                            100
                        ]
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "widgets"
                ]
            },
            "post": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "409": {
                        "description": "Widget name already exists."
                    },
                    "403": {
                        "description": "Administrator token required."
                    },
                    "201": {
                        "description": "Added new widget."
                    }
                },
                "summary": "Create a widget",
                "operationId": "post_widget_list",
                "parameters": [
                    {
                        "name": "name",
                        "in": "formData",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "info_url",
                        "in": "formData",
                        "type": "string",
                        "format": "url",
                        "required": true
                    },
                    {
                        "name": "deadline",
                        "in": "formData",
                        "type": "string",
                        "required": true
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "tags": [
                    "widgets"
                ]
            }
        },
        "/widgets/{name}": {
            "parameters": [
                {
                    "in": "path",
                    "description": "Widget name",
                    "name": "name",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "404": {
                        "description": "Widget not found."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "200": {
                        "description": "Retrieved widget.",
                        "schema": {
                            "$ref": "#/definitions/Widget"
                        }
                    }
                },
                "summary": "Retrieve a widget",
                "operationId": "get_widget",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "widgets"
                ]
            },
            "delete": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "404": {
                        "description": "Widget not found."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "403": {
                        "description": "Administrator token required."
                    },
                    "204": {
                        "description": "Widget was deleted."
                    }
                },
                "summary": "Delete a widget",
                "operationId": "delete_widget",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "widgets"
                ]
            },
            "put": {
                "responses": {
                    "500": {
                        "description": "Internal server error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "404": {
                        "description": "Widget not found."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "403": {
                        "description": "Administrator token required."
                    },
                    "201": {
                        "description": "Added new widget."
                    },
                    "200": {
                        "description": "Widget was updated.",
                        "schema": {
                            "$ref": "#/definitions/Widget"
                        }
                    }
                },
                "summary": "Update a widget",
                "operationId": "put_widget",
                "parameters": [
                    {
                        "name": "info_url",
                        "in": "formData",
                        "type": "string",
                        "format": "url",
                        "required": true
                    },
                    {
                        "name": "deadline",
                        "in": "formData",
                        "type": "string",
                        "required": true
                    }
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "tags": [
                    "widgets"
                ]
            }
        }
    },
    "info": {
        "title": "Flask API with JWT-Based Authentication",
        "version": "1.0",
        "description": "Welcome to the Swagger UI documentation site!"
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization"
        }
    },
    "tags": [
        {
            "name": "auth"
        },
        {
            "name": "widgets"
        }
    ],
    "definitions": {
        "User": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                },
                "admin": {
                    "type": "boolean"
                },
                "registered_on": {
                    "type": "string"
                },
                "token_expires_in": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Pagination": {
            "properties": {
                "links": {
                    "$ref": "#/definitions/Nav Links"
                },
                "has_prev": {
                    "type": "boolean"
                },
                "has_next": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                },
                "items_per_page": {
                    "type": "integer"
                },
                "total_items": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Widget"
                    }
                }
            },
            "type": "object"
        },
        "Nav Links": {
            "properties": {
                "self": {
                    "type": "string"
                },
                "prev": {
                    "type": "string"
                },
                "next": {
                    "type": "string"
                },
                "first": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Widget": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "info_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_at_iso8601": {
                    "type": "string",
                    "format": "date-time"
                },
                "created_at_rfc822": {
                    "type": "string",
                    "format": "date-time"
                },
                "deadline": {
                    "type": "string"
                },
                "deadline_passed": {
                    "type": "boolean"
                },
                "time_remaining": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/Widget Owner"
                },
                "link": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Widget Owner": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}
